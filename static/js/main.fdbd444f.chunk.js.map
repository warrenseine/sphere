{"version":3,"sources":["useInput.ts","App.tsx","index.tsx"],"names":["useKeyPress","targetCode","callback","keyPress","useCallback","code","useEffect","window","addEventListener","removeEventListener","ballColors","getBallColor","ballId","length","useStore","create","set","get","player","orientation","Quaternion","color","Math","floor","random","balls","List","nextBallId","bricks","Map","nextBrickId","outlineSelection","Set","actions","addBall","state","ball","translation","Vector3","direction","position","applyQuaternion","velocity","multiplyScalar","createBallFromPlayer","push","slice","removeBrick","brickId","delete","addRandomBrick","addBrick","brickGap","maxBricks","PI","positionX","positionY","getRandomBrickPosition","brick","orbitOffset","addDefaultBricks","samples","radius","points","offset","increment","sqrt","i","y","distance","pow","phi","x","cos","z","sin","generateFibonacciSphere","forEach","updateBrick","changes","update","value","setPlayer","addOutlineSelection","mesh","add","removeOutlineSelection","remove","resetGame","clear","addOutlineSelectionSelector","removeOutlineSelectionSelector","setPlayerSelector","addBallSelector","updateBrickSelector","resetGameSelector","PlayerGroup","controls","useRef","camera","useThree","padSize","useBox","args","mass","toArray","rotation","type","onCollide","collide","ref","api","e","CODE_SPACE","options","useState","down","setDown","setPosition","previousPosition","setPreviousPosition","initialPosition","setInitialPosition","handlePointerDown","event","clientX","clientY","handlePointerMove","handlePointerUp","abs","onUp","undefined","useTouch","useFrame","delta","getWorldQuaternion","Euler","setFromQuaternion","getWorldPosition","copy","current","OrbitControls","minZoom","maxZoom","enablePan","enableZoom","enableRotate","enableDamping","BallGroup","props","ambientIntensity","size","pointIntensity","intensity","map","BallMesh","lightIntensity","useSphere","scale","castShadow","attach","shadow-mapSize-width","shadow-mapSize-height","BrickGroup","valueSeq","BrickMesh","playerColor","useMemo","eye","target","up","lookAt","Matrix4","setFromRotationMatrix","brickSize","RoundedBox","receiveShadow","Effects","outlineSelectionArray","filter","v","gPressed","keyPressed","setKeyPressed","keyDown","keyUp","useKeyDown","CODE_G","fallback","multisampling","autoClear","active","ratio","delay","Vector2","selection","edgeStrength","pulseSpeed","visibleEdgeColor","hiddenEdgeColor","blur","xRay","width","height","Stars","depth","count","factor","saturation","fade","eskil","darkness","ViewportResize","gl","viewport","targetSize","aspect","getDrawingBufferSize","equals","setDrawingBufferSize","App","CODE_R","style","backgroundColor","shadows","Stats","showPanel","className","AdaptiveDpr","pixelated","gravity","defaultContactMaterial","friction","restitution","softShadows","frustum","near","rings","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.fdbd444f.chunk.js","sourcesContent":["import { useCallback, useEffect, useState } from \"react\";\n\nexport function useKeyDown(targetCode: string): boolean {\n  const [keyPressed, setKeyPressed] = useState(false);\n\n  const keyDown = useCallback(\n    ({ code }: KeyboardEvent) => {\n      if (code === targetCode) {\n        setKeyPressed(true);\n      }\n    },\n    [targetCode]\n  );\n\n  const keyUp = useCallback(\n    ({ code }: KeyboardEvent) => {\n      if (code === targetCode) {\n        setKeyPressed(false);\n      }\n    },\n    [targetCode]\n  );\n\n  useEffect(() => {\n    window.addEventListener(\"keydown\", keyDown);\n    window.addEventListener(\"keyup\", keyUp);\n    return () => {\n      window.removeEventListener(\"keydown\", keyDown);\n      window.removeEventListener(\"keyup\", keyUp);\n    };\n  }, [keyDown, keyUp]);\n\n  return keyPressed;\n}\n\nexport function useKeyPress(targetCode: string, callback: () => void): void {\n  const keyPress = useCallback(\n    ({ code }: KeyboardEvent) => {\n      if (code === targetCode) {\n        callback();\n      }\n    },\n    [targetCode, callback]\n  );\n\n  useEffect(() => {\n    window.addEventListener(\"keypress\", keyPress);\n    return () => {\n      window.removeEventListener(\"keypress\", keyPress);\n    };\n  }, [keyPress]);\n}\n\nexport type TouchPosition = { x: number; y: number } | undefined;\n\nexport type TouchState = {\n  down: boolean;\n  position: TouchPosition;\n  offset: TouchPosition;\n};\n\ntype UseTouchOptions = {\n  onUp: (() => void) | undefined;\n};\n\nexport function useTouch(options?: UseTouchOptions): TouchState {\n  const [down, setDown] = useState<boolean>(false);\n  const [position, setPosition] = useState<TouchPosition>();\n  const [previousPosition, setPreviousPosition] = useState<TouchPosition>();\n  const [initialPosition, setInitialPosition] = useState<TouchPosition>();\n\n  const handlePointerDown = useCallback(\n    (event: PointerEvent) => {\n      setInitialPosition({ x: event.clientX, y: event.clientY });\n      setPreviousPosition({ x: event.clientX, y: event.clientY });\n      setPosition({ x: event.clientX, y: event.clientY });\n      setDown(true);\n    },\n    [setPosition, setInitialPosition, setPreviousPosition, setDown]\n  );\n\n  const handlePointerMove = useCallback(\n    (event: PointerEvent) => {\n      if (down) {\n        setPreviousPosition(position);\n        setPosition({ x: event.clientX, y: event.clientY });\n      }\n    },\n    [setPosition, setPreviousPosition, position, down]\n  );\n\n  const handlePointerUp = useCallback(() => {\n    if (\n      position &&\n      initialPosition &&\n      Math.abs(position.x - initialPosition.x) < 10 &&\n      Math.abs(position.y - initialPosition.y) < 10 &&\n      options?.onUp\n    ) {\n      options.onUp();\n    }\n\n    setPosition(undefined);\n    setPreviousPosition(undefined);\n    setInitialPosition(undefined);\n    setDown(false);\n  }, [\n    options,\n    position,\n    initialPosition,\n    setPosition,\n    setPreviousPosition,\n    setInitialPosition,\n    setDown,\n  ]);\n\n  useEffect(() => {\n    window.addEventListener(\"pointerdown\", handlePointerDown);\n    window.addEventListener(\"pointermove\", handlePointerMove);\n    window.addEventListener(\"pointerup\", handlePointerUp);\n    return () => {\n      window.removeEventListener(\"pointerdown\", handlePointerDown);\n      window.removeEventListener(\"pointermove\", handlePointerMove);\n      window.removeEventListener(\"pointerup\", handlePointerUp);\n    };\n  }, [handlePointerDown, handlePointerMove, handlePointerUp]);\n\n  return {\n    down: down,\n    position: position,\n    offset:\n      position && previousPosition\n        ? {\n            x: position.x - previousPosition.x,\n            y: position.y - previousPosition.y,\n          }\n        : { x: 0, y: 0 },\n  };\n}\n\nexport function useClick(callback: (e: MouseEvent) => void): void {\n  useEffect(() => {\n    window.addEventListener(\"click\", callback);\n    return () => {\n      window.removeEventListener(\"click\", callback);\n    };\n  }, [callback]);\n}\n","import { Physics, useBox, useSphere } from \"@react-three/cannon\";\nimport {\n  AdaptiveDpr,\n  OrbitControls,\n  RoundedBox,\n  softShadows,\n  Stars,\n  Stats,\n} from \"@react-three/drei\";\nimport { Canvas, useFrame, useThree } from \"@react-three/fiber\";\nimport {\n  EffectComposer,\n  Glitch,\n  Outline,\n  SMAA,\n  Vignette,\n} from \"@react-three/postprocessing\";\nimport { List, Map, Set } from \"immutable\";\nimport { CODE_G, CODE_R, CODE_SPACE } from \"keycode-js\";\nimport {\n  MutableRefObject,\n  Ref,\n  Suspense,\n  useCallback,\n  useEffect,\n  useMemo,\n  useRef,\n} from \"react\";\nimport {\n  Euler,\n  Event,\n  Matrix4,\n  Mesh,\n  Object3D,\n  Quaternion,\n  Vector2,\n  Vector3,\n} from \"three\";\nimport { OrbitControls as OrbitControlsImpl } from \"three-stdlib\";\nimport create, { State } from \"zustand\";\nimport \"./App.css\";\nimport { useKeyDown, useKeyPress, useTouch } from \"./useInput\";\n\ntype Player = {\n  orientation: Quaternion;\n  color: string;\n};\n\nconst createPlayer = (): Player => ({\n  orientation: new Quaternion(),\n  color: getBallColor(Math.floor(Math.random() * ballColors.length)),\n});\n\nconst ballColors = [\n  \"rgb(249, 65, 68)\",\n  \"rgb(243, 114, 44)\",\n  \"rgb(248, 150, 30)\",\n  \"rgb(249, 199, 79)\",\n  \"rgb(144, 190, 109)\",\n  \"rgb(67, 170, 139)\",\n  \"rgb(87, 117, 144)\",\n];\n\nfunction getBallColor(ballId: number): string {\n  return ballColors[ballId % ballColors.length];\n}\n\ntype Ball = {\n  velocity: Vector3;\n  position: Vector3;\n  color: string;\n  ballId: number;\n};\n\nconst createBallFromPlayer = (ballId: number, player: Player): Ball => {\n  const translation = new Vector3(0, 0, 3);\n  const direction = new Vector3(0, 0, -1);\n\n  const position = translation.applyQuaternion(player.orientation);\n  const velocity = direction\n    .applyQuaternion(player.orientation)\n    .multiplyScalar(2);\n\n  return {\n    ballId,\n    position,\n    velocity,\n    color: player.color,\n  };\n};\n\ntype Brick = {\n  orbitOffset: Vector3;\n  color: string;\n  brickId: number;\n  mesh?: Mesh;\n};\n\nconst createBrick = (brickId: number, orbitOffset: Vector3): Brick => ({\n  brickId,\n  orbitOffset,\n  color: getBallColor(brickId),\n});\n\nconst getRandomBrickPosition = (): Vector3 => {\n  const brickWidth = 0.4;\n  const brickGap = 0.2;\n  const maxBricks = Math.floor((2 * Math.PI) / (brickWidth + brickGap));\n  const positionX = Math.floor(Math.random() * maxBricks);\n  const positionY = Math.floor(Math.random() * maxBricks);\n\n  return new Vector3(\n    positionX * (brickWidth + brickGap) + brickGap / 2,\n    positionY * (brickWidth + brickGap) + brickGap / 2,\n    1.5\n  );\n};\n\ntype Object3DRef = MutableRefObject<Object3D | undefined>;\ninterface AppState extends State {\n  player: Player;\n  balls: List<Ball>;\n  nextBallId: number;\n  bricks: Map<number, Brick>;\n  nextBrickId: number;\n  outlineSelection: Set<Object3DRef>;\n  actions: {\n    addBall: () => void;\n    removeBrick: (brickId: number) => void;\n    addBrick: (position: Vector3) => void;\n    addRandomBrick: () => void;\n    addDefaultBricks: () => void;\n    updateBrick: (brickId: number, changes: Partial<Brick>) => void;\n    setPlayer: (changes: Partial<Player>) => void;\n    addOutlineSelection: (mesh: Object3DRef) => void;\n    removeOutlineSelection: (mesh: Object3DRef) => void;\n    resetGame: () => void;\n  };\n}\n\nconst useStore = create<AppState>((set, get) => ({\n  player: createPlayer(),\n  balls: List<Ball>(),\n  nextBallId: 0,\n  bricks: Map<number, Brick>(),\n  nextBrickId: 0,\n  outlineSelection: Set<Object3DRef>(),\n  actions: {\n    addBall: () =>\n      set((state) => {\n        const ball = createBallFromPlayer(state.nextBallId, state.player);\n        return {\n          balls: state.balls.push(ball).slice(-3),\n          nextBallId: state.nextBallId + 1,\n        };\n      }),\n    removeBrick: (brickId: number) =>\n      set((state) => ({ bricks: state.bricks.delete(brickId) })),\n    addRandomBrick: () => {\n      const {\n        actions: { addBrick },\n      } = get();\n      addBrick(getRandomBrickPosition());\n    },\n    addBrick: (position: Vector3) =>\n      set((state) => {\n        const brick = createBrick(state.nextBrickId, position);\n        return {\n          bricks: state.bricks.set(brick.brickId, brick),\n          nextBrickId: state.nextBrickId + 1,\n        };\n      }),\n    addDefaultBricks: () => {\n      const {\n        actions: { addBrick },\n      } = get();\n      const points = generateFibonacciSphere();\n      points.forEach(addBrick);\n    },\n    updateBrick: (brickId: number, changes: Partial<Brick>) =>\n      set((state) => ({\n        bricks: state.bricks.update(brickId, (value) => ({\n          ...value,\n          ...changes,\n        })),\n      })),\n    setPlayer: (changes: Partial<Player>) =>\n      set((state) => ({\n        player: {\n          ...state.player,\n          ...changes,\n        },\n      })),\n    addOutlineSelection: (mesh: Object3DRef) =>\n      set((state) => ({ outlineSelection: state.outlineSelection.add(mesh) })),\n    removeOutlineSelection: (mesh: Object3DRef) =>\n      set((state) => ({\n        outlineSelection: state.outlineSelection.remove(mesh),\n      })),\n    resetGame: () => {\n      const {\n        actions: { addDefaultBricks },\n      } = get();\n      set((state) => ({\n        balls: state.balls.clear(),\n        bricks: state.bricks.clear(),\n      }));\n      addDefaultBricks();\n    },\n  },\n}));\n\nconst addOutlineSelectionSelector = (state: AppState) =>\n  state.actions.addOutlineSelection;\nconst removeOutlineSelectionSelector = (state: AppState) =>\n  state.actions.removeOutlineSelection;\nconst setPlayerSelector = (state: AppState) => state.actions.setPlayer;\nconst addBallSelector = (state: AppState) => state.actions.addBall;\nconst updateBrickSelector = (state: AppState) => state.actions.updateBrick;\nconst resetGameSelector = (state: AppState) => state.actions.resetGame;\n\nfunction generateFibonacciSphere() {\n  const samples = 64;\n  const radius = 1.5;\n\n  const points = [];\n  const offset = 2 / samples;\n  const increment = Math.PI * (3 - Math.sqrt(5));\n\n  for (let i = 0; i < samples; i++) {\n    const y = i * offset - 1 + offset / 2;\n    const distance = Math.sqrt(1 - Math.pow(y, 2));\n    const phi = ((i + 1) % samples) * increment;\n    const x = Math.cos(phi) * distance;\n    const z = Math.sin(phi) * distance;\n    points.push(new Vector3(x * radius, y * radius, z * radius));\n  }\n\n  return points;\n}\n\nfunction lookAt(eye: Vector3, target: Vector3): [Euler, Vector3] {\n  const up = new Vector3(0, 1, 0);\n  const lookAt = new Matrix4().lookAt(eye, target, up);\n  const rotation = new Euler().setFromRotationMatrix(lookAt);\n\n  return [rotation, eye];\n}\n\nfunction PlayerGroup() {\n  const controls = useRef<OrbitControlsImpl>(null!);\n  const camera = useThree(({ camera }) => camera);\n  const setPlayer = useStore(setPlayerSelector);\n  const addBall = useStore(addBallSelector);\n  const padSize: [number, number, number] = [2, 2, 0.1];\n  const translation = new Vector3(0, 0, 5);\n\n  const [ref, api] = useBox(() => ({\n    args: padSize,\n    mass: 1,\n    position: translation.toArray(),\n    rotation: [Math.PI, 0, 0],\n    type: \"Static\",\n    onCollide: collide,\n  }));\n\n  const collide = useCallback((e: Event) => {}, []);\n\n  useKeyPress(CODE_SPACE, addBall);\n\n  useTouch({ onUp: addBall });\n\n  useFrame((state, delta) => {\n    const orientation = camera.getWorldQuaternion(new Quaternion());\n    const rotation = new Euler().setFromQuaternion(orientation);\n    const position = camera.getWorldPosition(new Vector3());\n\n    api.rotation.copy(rotation);\n    api.position.copy(position);\n\n    setPlayer({ orientation });\n  });\n\n  useEffect(() => {\n    const mesh = ref.current!;\n    mesh.addEventListener(\"collide\", collide);\n    return () => mesh.removeEventListener(\"collide\", collide);\n  }, [ref, collide]);\n\n  return (\n    <group>\n      <OrbitControls\n        ref={controls}\n        minZoom={6}\n        maxZoom={6}\n        enablePan={false}\n        enableZoom={false}\n        enableRotate={true}\n        enableDamping={true}\n        camera={camera}\n      />\n    </group>\n  );\n}\n\nfunction BallGroup(props: JSX.IntrinsicElements[\"group\"]) {\n  const balls = useStore((state) => state.balls);\n  const ambientIntensity = balls.size > 0 ? 0 : 0.6;\n  const pointIntensity = balls.size > 0 ? 0.6 / balls.size : 0;\n\n  return (\n    <group {...props}>\n      <ambientLight intensity={ambientIntensity} />\n      {balls.map((ball) => (\n        <BallMesh\n          key={ball.ballId}\n          ball={ball}\n          lightIntensity={pointIntensity}\n        />\n      ))}\n    </group>\n  );\n}\n\nfunction BallMesh({\n  ball,\n  lightIntensity,\n}: {\n  ball: Ball;\n  lightIntensity: number;\n}) {\n  const addOutlineSelection = useStore(addOutlineSelectionSelector);\n  const removeOutlineSelection = useStore(removeOutlineSelectionSelector);\n  const ballRadius = 0.2;\n\n  const [ref] = useSphere(() => ({\n    args: ballRadius,\n    mass: 1,\n    position: ball.position.toArray(),\n    velocity: ball.velocity.toArray(),\n  }));\n\n  useEffect(() => {\n    addOutlineSelection(ref);\n    return () => removeOutlineSelection(ref);\n  }, [ref, addOutlineSelection, removeOutlineSelection]);\n\n  return (\n    <mesh ref={ref} scale={ballRadius} castShadow>\n      <sphereGeometry args={[1, 16, 16]} />\n      <meshToonMaterial attach=\"material\" color={ball.color} />\n      <pointLight\n        intensity={lightIntensity}\n        castShadow\n        shadow-mapSize-width={256}\n        shadow-mapSize-height={256}\n      />\n    </mesh>\n  );\n}\n\nfunction BrickGroup() {\n  const bricks = useStore((state) => state.bricks);\n\n  return (\n    <group>\n      {bricks.valueSeq().map((brick: Brick) => (\n        <BrickMesh key={brick.brickId} brick={brick} />\n      ))}\n    </group>\n  );\n}\n\nfunction BrickMesh({ brick }: { brick: Brick }) {\n  const playerColor = useStore((state) => state.player.color);\n  const updateBrick = useStore(updateBrickSelector);\n  const addOutlineSelection = useStore(addOutlineSelectionSelector);\n  const removeOutlineSelection = useStore(removeOutlineSelectionSelector);\n  const [rotation, position] = useMemo(\n    () => lookAt(brick.orbitOffset, new Vector3()),\n    [brick]\n  );\n  const brickSize: [number, number, number] = [0.4, 0.4, 0.1];\n  const [ref] = useBox(\n    () => ({\n      args: brickSize,\n      mass: 1,\n      position: position.toArray(),\n      rotation: rotation.toArray(),\n      type: \"Static\",\n      onCollide: collide,\n    }),\n    undefined,\n    [rotation, position]\n  );\n\n  const collide = useCallback(\n    (e: Event) => {\n      updateBrick(brick.brickId, { color: playerColor });\n    },\n    [updateBrick, brick, playerColor]\n  );\n\n  useEffect(() => {\n    addOutlineSelection(ref);\n    return () => removeOutlineSelection(ref);\n  }, [ref, addOutlineSelection, removeOutlineSelection]);\n\n  return (\n    <RoundedBox\n      args={brickSize} // Width, Height and Depth of the box\n      radius={0.05} // Border-Radius of the box\n      ref={ref as Ref<Mesh>} // All THREE.Mesh props are valid\n      receiveShadow\n    >\n      <meshToonMaterial attach=\"material\" color={brick.color} />\n    </RoundedBox>\n  );\n}\n\nfunction Effects() {\n  const outlineSelection = useStore((state) => state.outlineSelection);\n  const outlineSelectionArray = useMemo(\n    () =>\n      outlineSelection\n        .toArray()\n        .filter(\n          (v: Object3DRef): v is MutableRefObject<Object3D> =>\n            v.current !== undefined\n        ),\n    [outlineSelection]\n  );\n  const gPressed = useKeyDown(CODE_G);\n\n  return (\n    <Suspense fallback={null}>\n      <EffectComposer multisampling={0} autoClear={false}>\n        {gPressed ? (\n          <Glitch\n            active={true} // turn on/off the effect (switches between \"mode\" prop and GlitchMode.DISABLED)\n            ratio={0.85} // Threshold for strong glitches, 0 - no weak glitches, 1 - no strong glitches.\n            delay={new Vector2(0, 0)}\n          />\n        ) : (\n          <SMAA />\n        )}\n        <Outline\n          selection={outlineSelectionArray}\n          edgeStrength={10} // the edge strength\n          pulseSpeed={0.0} // a pulse speed. A value of zero disables the pulse effect\n          visibleEdgeColor={0xffffff} // the color of visible edges\n          hiddenEdgeColor={0x22090a} // the color of hidden edges\n          blur={false} // whether the outline should be blurred\n          xRay={false} // indicates whether X-Ray outlines are enabled\n          width={2048}\n          height={2048}\n        />\n        <Stars\n          radius={100} // Radius of the inner sphere (default=100)\n          depth={50} // Depth of area where stars should fit (default=50)\n          count={5000} // Amount of stars (default=5000)\n          factor={4} // Size factor (default=4)\n          saturation={0} // Saturation 0-1 (default=0)\n          fade // Faded dots (default=false)\n        />\n        <Vignette eskil={false} offset={0.1} darkness={1.1} />\n        {/* <SMAA /> */}\n      </EffectComposer>\n    </Suspense>\n  );\n}\n\nfunction ViewportResize() {\n  const { gl, viewport } = useThree();\n  const targetSize = new Vector2(1920, 1920 / viewport.aspect);\n\n  useFrame(() => {\n    const size = gl.getDrawingBufferSize(new Vector2());\n    if (!size.equals(targetSize)) {\n      gl.setDrawingBufferSize(targetSize.x, targetSize.y, 1);\n    }\n  });\n\n  return null;\n}\n\nsoftShadows({\n  frustum: 3.75, // Frustum width (default: 3.75) must be a float\n  size: 0.005, // World size (default: 0.005) must be a float\n  near: 9.5, // Near plane (default: 9.5) must be a float\n  samples: 17, // Samples (default: 17) must be a int\n  rings: 11, // Rings (default: 11) must be a int\n});\n\nexport default function App() {\n  const resetGame = useStore(resetGameSelector);\n\n  useEffect(resetGame, [resetGame]);\n  useKeyPress(CODE_R, resetGame);\n\n  return (\n    <Canvas style={{ backgroundColor: \"#121212\" }} shadows>\n      <ViewportResize />\n      <Stats\n        showPanel={0} // Start-up panel (default=0)\n        className=\"stats\" // Optional className to add to the stats container dom element\n      />\n      <AdaptiveDpr pixelated />\n      <Physics\n        gravity={[0, 0, 0]}\n        defaultContactMaterial={{\n          friction: 0,\n          restitution: 1.1,\n        }}\n      >\n        <BallGroup />\n        <BrickGroup />\n        <PlayerGroup />\n      </Physics>\n      <Effects />\n    </Canvas>\n  );\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"bootstrap/dist/css/bootstrap.css\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}