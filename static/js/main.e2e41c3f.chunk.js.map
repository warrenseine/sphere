{"version":3,"sources":["useKeyPress.ts","App.tsx","index.tsx"],"names":["useKeyDown","targetKeyCode","useState","keyPressed","setKeyPressed","keyDown","useCallback","keyCode","keyUp","useEffect","window","addEventListener","removeEventListener","playerState","atom","key","default","orbitOffset","Vector3","ballState","dangerouslyAllowMutability","ballId","ballColors","Sphere","props","useSphere","args","mass","type","ref","receiveShadow","attach","color","Player","leftPressed","KEY_LEFT","rightPressed","KEY_RIGHT","padGroup","useRef","camera","useRecoilState","player","setPlayer","padSize","useBox","position","rotation","Math","PI","onCollide","collide","api","setBalls","useSetRecoilState","distort","useSpring","to","from","config","duration","e","reset","callback","keyPress","useKeyPress","KEY_SPACE","direction","current","getWorldDirection","normalize","multiplyScalar","velocity","clone","getWorldPosition","add","length","getBallColor","newBall","angularVelocity","Euler","balls","slice","useFrame","state","delta","orbitVelocity","addScaledVector","quaternion","Quaternion","setFromAxisAngle","y","euler","setFromQuaternion","copy","translation","applyQuaternion","mesh","RoundedBox","radius","smoothness","MeshDistortMaterial","get","speed","PerspectiveCamera","makeDefault","Balls","useRecoilValue","map","ball","Ball","toArray","scale","castShadow","App","style","backgroundColor","shadows","gravity","defaultContactMaterial","friction","restitution","shadow-mapSize-width","shadow-mapSize-height","multisampling","active","ratio","Stars","depth","count","factor","saturation","fade","eskil","offset","darkness","softShadows","frustum","size","near","samples","rings","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e2e41c3f.chunk.js","sourcesContent":["import { useCallback, useEffect, useState } from \"react\";\n\nexport function useKeyDown(targetKeyCode: number): boolean {\n  const [keyPressed, setKeyPressed] = useState(false);\n\n  const keyDown = useCallback(\n    ({ keyCode }) => {\n      if (keyCode === targetKeyCode) {\n        setKeyPressed(true);\n      }\n    },\n    [targetKeyCode]\n  );\n\n  const keyUp = useCallback(\n    ({ keyCode }) => {\n      if (keyCode === targetKeyCode) {\n        setKeyPressed(false);\n      }\n    },\n    [targetKeyCode]\n  );\n\n  useEffect(() => {\n    window.addEventListener(\"keydown\", keyDown);\n    window.addEventListener(\"keyup\", keyUp);\n    return () => {\n      window.removeEventListener(\"keydown\", keyDown);\n      window.removeEventListener(\"keyup\", keyUp);\n    };\n  }, [keyDown, keyUp]);\n\n  return keyPressed;\n}\n\nexport function useKeyPress(targetKeyCode: number, callback: () => void): void {\n  const keyPress = useCallback(\n    ({ keyCode }) => {\n      if (keyCode === targetKeyCode) {\n        callback();\n      }\n    },\n    [targetKeyCode, callback]\n  );\n\n  useEffect(() => {\n    window.addEventListener(\"keypress\", keyPress);\n    return () => {\n      window.removeEventListener(\"keypress\", keyPress);\n    };\n  }, [keyPress]);\n}\n","import { useSpring } from \"@react-spring/core\";\nimport { Physics, useBox, useSphere } from \"@react-three/cannon\";\nimport {\n  MeshDistortMaterial,\n  PerspectiveCamera,\n  RoundedBox,\n  softShadows,\n  Stars,\n} from \"@react-three/drei\";\nimport { Canvas, useFrame } from \"@react-three/fiber\";\nimport { EffectComposer, Glitch, Vignette } from \"@react-three/postprocessing\";\nimport { KEY_LEFT, KEY_RIGHT, KEY_SPACE } from \"keycode-js\";\nimport { Ref, useCallback, useEffect, useRef } from \"react\";\nimport {\n  atom,\n  RecoilRoot,\n  useRecoilState,\n  useRecoilValue,\n  useSetRecoilState,\n} from \"recoil\";\nimport { Camera, Euler, Event, Group, Mesh, Quaternion, Vector3 } from \"three\";\nimport \"./App.css\";\nimport { useKeyDown, useKeyPress } from \"./useKeyPress\";\n\ntype PlayerState = {\n  orbitOffset: Vector3;\n};\n\nconst playerState = atom<PlayerState>({\n  key: \"player\",\n  default: {\n    orbitOffset: new Vector3(),\n  },\n});\n\ntype BallState = {\n  angularVelocity: Euler;\n  velocity: Vector3;\n  position: Vector3;\n  color: string;\n  ballId: number;\n};\n\nconst ballState = atom<BallState[]>({\n  key: \"ball\",\n  default: [],\n  dangerouslyAllowMutability: true,\n});\n\nlet ballId = 0;\nfunction getBallId() {\n  return ++ballId;\n}\n\nconst ballColors = [\n  \"rgb(249, 65, 68)\",\n  \"rgb(243, 114, 44)\",\n  \"rgb(248, 150, 30)\",\n  \"rgb(249, 199, 79)\",\n  \"rgb(144, 190, 109)\",\n  \"rgb(67, 170, 139)\",\n  \"rgb(87, 117, 144)\",\n];\n\nfunction getBallColor(ballId: number) {\n  return ballColors[ballId % ballColors.length];\n}\n\nfunction Sphere(props: JSX.IntrinsicElements[\"mesh\"]) {\n  const [ref] = useSphere(() => ({\n    args: 1, // radius\n    mass: 1,\n    type: \"Static\",\n  }));\n\n  return (\n    <mesh {...props} ref={ref} receiveShadow>\n      <sphereGeometry args={[1, 32, 32]} />\n      <meshToonMaterial attach=\"material\" color=\"hotpink\" />\n    </mesh>\n  );\n}\n\nfunction Player(props: JSX.IntrinsicElements[\"group\"]) {\n  const leftPressed = useKeyDown(KEY_LEFT);\n  const rightPressed = useKeyDown(KEY_RIGHT);\n  const padGroup = useRef<Group>(null!);\n  const camera = useRef<Camera>(null!);\n  const [player, setPlayer] = useRecoilState(playerState);\n  const padSize: [number, number, number] = [1, 0.2, 0.1];\n  const [ref, api] = useBox(() => ({\n    args: padSize,\n    mass: 1,\n    position: [0, 0, 4],\n    rotation: [Math.PI, 0, 0],\n    type: \"Static\",\n    onCollide: collide,\n  }));\n\n  const setBalls = useSetRecoilState(ballState);\n\n  const { distort } = useSpring({\n    to: { distort: 0 },\n    from: { distort: 0.4 },\n    config: { duration: 1500 },\n  });\n\n  const collide = useCallback(\n    (e: Event) => {\n      distort.reset();\n    },\n    [distort]\n  );\n\n  useKeyPress(KEY_SPACE, () => {\n    const direction = ref\n      .current!.getWorldDirection(new Vector3())\n      .normalize()\n      .multiplyScalar(-1);\n    const velocity = direction.clone().multiplyScalar(1.5);\n    const position = ref\n      .current!.getWorldPosition(new Vector3())\n      .add(direction);\n    const ballId = getBallId();\n    const color = getBallColor(ballId);\n\n    const newBall: BallState = {\n      angularVelocity: new Euler(),\n      velocity,\n      position,\n      color,\n      ballId,\n    };\n\n    setBalls((balls) => [...balls, newBall].slice(-3));\n  });\n\n  useFrame((state, delta) => {\n    const orbitVelocity = new Vector3(\n      0,\n      leftPressed ? -1 : rightPressed ? 1 : 0,\n      0\n    );\n    const orbitOffset = player.orbitOffset\n      .clone()\n      .addScaledVector(orbitVelocity, delta);\n\n    setPlayer({ orbitOffset });\n  });\n\n  useFrame((state, delta) => {\n    const quaternion = new Quaternion();\n    quaternion.setFromAxisAngle(new Vector3(0, 1, 0), player.orbitOffset.y);\n\n    const euler = new Euler();\n    euler.setFromQuaternion(quaternion);\n\n    api.rotation.copy(euler);\n\n    const translationOffset = new Vector3(0, 0, 4);\n\n    // Use quaternion to rotate the relative vector.\n    const translation = translationOffset.applyQuaternion(quaternion);\n\n    api.position.copy(translation);\n  });\n\n  useEffect(() => {\n    const mesh = ref.current!;\n    mesh.addEventListener(\"collide\", collide);\n    return () => mesh.removeEventListener(\"collide\", collide);\n  }, [ref, collide]);\n\n  return (\n    <group ref={padGroup} {...props}>\n      <RoundedBox\n        args={padSize} // Width, Height and Depth of the box\n        radius={0.05} // Border-Radius of the box\n        smoothness={8} // Optional, number of subdivisions\n        ref={ref as Ref<Mesh>} // All THREE.Mesh props are valid\n        receiveShadow\n      >\n        <meshPhongMaterial attach=\"material\" color=\"#f3f3f3\" />\n        <MeshDistortMaterial\n          color=\"orange\"\n          attach=\"material\"\n          distort={distort.get()} // Strength, 0 disables the effect (default=1)\n          speed={10} // Speed (default=1)\n        />\n        <PerspectiveCamera\n          makeDefault\n          ref={camera}\n          position={[0, 1, 2]}\n          rotation={[-Math.PI / 16, 0, 0]}\n        />\n      </RoundedBox>\n    </group>\n  );\n}\n\nfunction Balls(props: JSX.IntrinsicElements[\"group\"]) {\n  const balls = useRecoilValue(ballState);\n\n  return (\n    <group {...props}>\n      {balls.map((ball) => (\n        <Ball key={ball.ballId} ball={ball} />\n      ))}\n    </group>\n  );\n}\n\nfunction Ball(props: JSX.IntrinsicElements[\"mesh\"] & { ball: BallState }) {\n  const ball = props.ball;\n  const ballRadius = 0.2;\n\n  const [ref] = useSphere(() => ({\n    args: ballRadius,\n    mass: 1,\n    position: ball.position.toArray(),\n    velocity: ball.velocity.toArray(),\n  }));\n\n  return (\n    <mesh {...props} ref={ref} scale={ballRadius} castShadow>\n      <sphereGeometry args={[1, 16, 16]} />\n      <meshToonMaterial attach=\"material\" color={ball.color} />\n    </mesh>\n  );\n}\n\nsoftShadows({\n  frustum: 3.75, // Frustum width (default: 3.75) must be a float\n  size: 0.005, // World size (default: 0.005) must be a float\n  near: 9.5, // Near plane (default: 9.5) must be a float\n  samples: 17, // Samples (default: 17) must be a int\n  rings: 11, // Rings (default: 11) must be a int\n});\n\nexport default function App() {\n  return (\n    <Canvas style={{ backgroundColor: \"#121212\" }} shadows>\n      <RecoilRoot>\n        <Physics\n          gravity={[0, 0, 0]}\n          defaultContactMaterial={{\n            friction: 0,\n            restitution: 1,\n          }}\n        >\n          <ambientLight />\n          <pointLight\n            position={[30, 10, 10]}\n            castShadow\n            shadow-mapSize-width={4096}\n            shadow-mapSize-height={4096}\n          />\n          <Balls />\n          <Sphere position={[0, 0, 0]} />\n          <Player position={[0, 0, 0]} />\n        </Physics>\n      </RecoilRoot>\n      <EffectComposer multisampling={0}>\n        <Glitch\n          active // turn on/off the effect (switches between \"mode\" prop and GlitchMode.DISABLED)\n          ratio={0.85} // Threshold for strong glitches, 0 - no weak glitches, 1 - no strong glitches.\n        />\n        <Stars\n          radius={100} // Radius of the inner sphere (default=100)\n          depth={50} // Depth of area where stars should fit (default=50)\n          count={5000} // Amount of stars (default=5000)\n          factor={4} // Size factor (default=4)\n          saturation={0} // Saturation 0-1 (default=0)\n          fade // Faded dots (default=false)\n        />\n        <Vignette eskil={false} offset={0.1} darkness={1.1} />\n      </EffectComposer>\n    </Canvas>\n  );\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"bootstrap/dist/css/bootstrap.css\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}