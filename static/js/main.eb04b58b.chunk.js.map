{"version":3,"sources":["useInput.ts","App.tsx","index.tsx"],"names":["useKeyDown","targetKeyCode","useState","keyPressed","setKeyPressed","keyDown","useCallback","keyCode","keyUp","useEffect","window","addEventListener","removeEventListener","ballColors","getBallColor","ballId","length","createBallFromPlayer","player","translation","Vector3","direction","position","velocity","color","createBall","applyQuaternion","orientation","multiplyScalar","createRandomBrick","brickId","brickGap","maxBricks","Math","floor","PI","positionX","random","positionY","orbitOffset","createBrick","useStore","create","set","get","Quaternion","balls","List","nextBallId","bricks","Map","nextBrickId","outlineSelection","Set","actions","addBall","state","ball","push","slice","removeBrick","delete","addRandomBrick","brick","updateBrick","changes","update","value","movePlayer","delta","leftPressed","rightPressed","upPressed","downPressed","touchPosition","verticalAngle","innerHeight","y","x","innerWidth","getAngleFromInput","horizontalAngle","verticalAxis","verticalRotation","setFromAxisAngle","horizontalAxis","horizontalRotation","clone","multiply","addOutlineSelection","mesh","add","removeOutlineSelection","remove","resetGame","Array","forEach","SphereMesh","useSphere","args","mass","type","ref","receiveShadow","attach","PlayerGroup","KEY_LEFT","KEY_RIGHT","KEY_UP","KEY_DOWN","touchDown","setTouchDown","setTouchPosition","handleMouseDown","event","clientX","clientY","handleMouseMove","handleTouchStart","touches","handleTouchMove","handleTouchEnd","undefined","useTouch","padGroup","useRef","camera","padSize","useBox","toArray","rotation","onCollide","collide","api","distort","useSpring","to","from","config","duration","e","reset","callback","keyPress","useKeyPress","KEY_SPACE","useFrame","Euler","setFromQuaternion","copy","current","RoundedBox","radius","smoothness","MeshDistortMaterial","speed","PerspectiveCamera","makeDefault","BallGroup","props","map","BallMesh","scale","castShadow","BrickGroup","valueSeq","BrickMesh","useMemo","quaternionX","quaternionY","quaternion","euler","z","orbitAround","brickSize","Effects","outlineSelectionArray","filter","v","gPressed","KEY_G","fallback","multisampling","autoClear","active","ratio","delay","Vector2","selection","edgeStrength","pulseSpeed","visibleEdgeColor","hiddenEdgeColor","blur","xRay","width","height","Stars","depth","count","factor","saturation","fade","eskil","offset","darkness","App","style","backgroundColor","shadows","Stats","showPanel","className","AdaptiveDpr","pixelated","gravity","defaultContactMaterial","friction","restitution","shadow-mapSize-width","shadow-mapSize-height","softShadows","frustum","size","near","samples","rings","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"yVAEO,SAASA,EAAWC,GACzB,MAAoCC,oBAAS,GAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KAEMC,EAAUC,uBACd,YAAiB,EAAdC,UACeN,GACdG,GAAc,KAGlB,CAACH,IAGGO,EAAQF,uBACZ,YAAiB,EAAdC,UACeN,GACdG,GAAc,KAGlB,CAACH,IAYH,OATAQ,qBAAU,WAGR,OAFAC,OAAOC,iBAAiB,UAAWN,GACnCK,OAAOC,iBAAiB,QAASH,GAC1B,WACLE,OAAOE,oBAAoB,UAAWP,GACtCK,OAAOE,oBAAoB,QAASJ,MAErC,CAACH,EAASG,IAENL,E,YC4BHU,EAAa,CACjB,mBACA,oBACA,oBACA,oBACA,qBACA,oBACA,qBAGF,SAASC,EAAaC,GACpB,OAAOF,EAAWE,EAASF,EAAWG,QAUxC,IAWMC,EAAuB,SAACF,EAAgBG,GAC5C,IAAMC,EAAc,IAAIC,UAAQ,EAAG,EAAG,GAChCC,EAAY,IAAID,UAAQ,EAAG,GAAI,GAOrC,OApBiB,SACjBL,EACAO,EACAC,GAHiB,MAIP,CACVR,SACAO,WACAC,WACAC,MAAOV,EAAaC,IAYbU,CAAWV,EALDI,EAAYO,gBAAgBR,EAAOS,aACnCN,EACdK,gBAAgBR,EAAOS,aACvBC,eAAe,KAkBdC,EAAoB,SAACC,GACzB,IACMC,EAAW,GACXC,EAAYC,KAAKC,MAAO,EAAID,KAAKE,IAFpB,GAEwCJ,IACrDK,EAAYH,KAAKC,MAAMD,KAAKI,SAAWL,GACvCM,EAAYL,KAAKC,MAAMD,KAAKI,SAAWL,GAE7C,OAbkB,SAACF,EAAiBS,GAAlB,MAAmD,CACrET,UACAS,cACAf,MAAOV,EAAagB,IAUbU,CACLV,EACA,IAAIV,UACFgB,GATe,GASWL,GAAYA,GACtCO,GAVe,GAUWP,GAAYA,GACtC,OAgCAU,EAAWC,aAAiB,SAACC,EAAKC,GAAN,MAAe,CAC/C1B,OA1GkC,CAClCS,YAAa,IAAIkB,cA0GjBC,MAAOC,cACPC,WAAY,EACZC,OAAQC,cACRC,YAAa,EACbC,iBAAkBC,cAClBC,QAAS,CACPC,QAAS,kBACPZ,GAAI,SAACa,GACH,IAAMC,EAAOxC,EAAqBuC,EAAMR,WAAYQ,EAAMtC,QAC1D,MAAO,CACL4B,MAAOU,EAAMV,MAAMY,KAAKD,GAAME,OAAO,GACrCX,WAAYQ,EAAMR,WAAa,OAGrCY,YAAa,SAAC9B,GAAD,OACXa,GAAI,SAACa,GAAD,MAAY,CAAEP,OAAQO,EAAMP,OAAOY,OAAO/B,QAChDgC,eAAgB,kBACdnB,GAAI,SAACa,GACH,IAAMO,EAAQlC,EAAkB2B,EAAML,aACtC,MAAO,CACLF,OAAQO,EAAMP,OAAON,IAAIoB,EAAMjC,QAASiC,GACxCZ,YAAaK,EAAML,YAAc,OAGvCa,YAAa,SAAClC,EAAiBmC,GAAlB,OACXtB,GAAI,SAACa,GAAD,MAAY,CACdP,OAAQO,EAAMP,OAAOiB,OAAOpC,GAAS,SAACqC,GAAD,mBAAC,eACjCA,GACAF,WAGTG,WAAY,SACVC,EACAC,EACAC,EACAC,EACAC,EACAC,GANU,OAQV/B,GAAI,SAACa,GACH,MA4CR,SACEc,EACAC,EACAC,EACAC,EACAC,GAEA,GAAIA,EAAe,CACjB,IAAMC,EACkE,IAApEjE,OAAOkE,YAAcF,EAAcG,GAAKnE,OAAOkE,YAAc,IAEjE,MAAO,CAD+D,GAA7CF,EAAcI,EAAIpE,OAAOqE,WAAa,IACtCJ,GAI3B,MAAO,CADiBL,GAAe,EAAIC,EAAe,EAAI,EADxCE,GAAe,EAAID,EAAY,EAAI,GAzDVQ,CACvCV,EACAC,EACAC,EACAC,EACAC,GALF,mBAAOO,EAAP,KAAwBN,EAAxB,KAOMO,EAAe,IAAI9D,WAAS,EAAG,EAAG,GAClC+D,GAAmB,IAAItC,cAAauC,iBACxCF,EACAP,EAAgBN,GAEZgB,EAAiB,IAAIjE,UAAQ,EAAG,EAAG,GACnCkE,GAAqB,IAAIzC,cAAauC,iBAC1CC,EACAJ,EAAkBZ,GAQpB,MAAO,CACLnD,OAAQ,CACNS,YAPgB6B,EAAMtC,OAAOS,YAC9B4D,QACAC,SAASL,GACTK,SAASF,SAQhBG,oBAAqB,SAACC,GAAD,OACnB/C,GAAI,SAACa,GAAD,MAAY,CAAEJ,iBAAkBI,EAAMJ,iBAAiBuC,IAAID,QACjEE,uBAAwB,SAACF,GAAD,OACtB/C,GAAI,SAACa,GAAD,MAAY,CACdJ,iBAAkBI,EAAMJ,iBAAiByC,OAAOH,QAEpDI,UAAW,WACT,IACahC,EACTlB,IADFU,QAAWQ,eAEb,YAAIiC,MAAM,KAAKC,QAAQlC,SA2C7B,SAASmC,IACP,MAAcC,aAAU,iBAAO,CAC7BC,KAAM,EACNC,KAAM,EACNC,KAAM,aAHDC,EAAP,oBAMA,OACE,uBAAMhF,SAAU,CAAC,EAAG,EAAG,GAAIgF,IAAKA,EAAKC,eAAa,EAAlD,UACE,gCAAgBJ,KAAM,CAAC,EAAG,GAAI,MAC9B,kCAAkBK,OAAO,WAAWhF,MAAM,eAKhD,SAASiF,IACP,IAAMhB,EAAsBhD,GAC1B,SAACe,GAAD,OAAWA,EAAMF,QAAQmC,uBAErBG,EAAyBnD,GAC7B,SAACe,GAAD,OAAWA,EAAMF,QAAQsC,0BAErBtB,EAActE,EAAW0G,KACzBnC,EAAevE,EAAW2G,KAC1BnC,EAAYxE,EAAW4G,KACvBnC,EAAczE,EAAW6G,KACzBnC,EDhQD,WACL,MAAkCxE,oBAAkB,GAApD,mBAAO4G,EAAP,KAAkBC,EAAlB,KACA,EAA0C7G,qBAA1C,mBAAOwE,EAAP,KAAsBsC,EAAtB,KAEMC,EAAkB3G,uBAAY,SAAC4G,GACnCF,EAAiB,CAAElC,EAAGoC,EAAMC,QAAStC,EAAGqC,EAAME,UAC9CL,GAAa,KACZ,CAACC,EAAkBD,IAEhBM,EAAkB/G,uBAAY,SAAC4G,GAC/BJ,GAAWE,EAAiB,CAAElC,EAAGoC,EAAMC,QAAStC,EAAGqC,EAAME,YAC5D,CAACJ,EAAkBF,IAEhBQ,EAAmBhH,uBAAY,SAAC4G,GACpCF,EAAiB,CAAElC,EAAGoC,EAAMK,QAAQ,GAAGJ,QAAStC,EAAGqC,EAAMK,QAAQ,GAAGH,UACpEL,GAAa,KACZ,CAACC,EAAkBD,IAEhBS,EAAkBlH,uBAAY,SAAC4G,GAC/BJ,GAAWE,EAAiB,CAAElC,EAAGoC,EAAMK,QAAQ,GAAGJ,QAAStC,EAAGqC,EAAMK,QAAQ,GAAGH,YAClF,CAACJ,EAAkBF,IAEhBW,EAAiBnH,uBAAY,WACjC0G,OAAiBU,GACjBX,GAAa,KACZ,CAACC,EAAkBD,IAmBtB,OAjBAtG,qBAAU,WAOR,OANAC,OAAOC,iBAAiB,aAAc2G,GACtC5G,OAAOC,iBAAiB,YAAa6G,GACrC9G,OAAOC,iBAAiB,WAAY8G,GACpC/G,OAAOC,iBAAiB,YAAasG,GACrCvG,OAAOC,iBAAiB,YAAa0G,GACrC3G,OAAOC,iBAAiB,UAAW8G,GAC5B,WACL/G,OAAOE,oBAAoB,aAAc0G,GACzC5G,OAAOE,oBAAoB,YAAa4G,GACxC9G,OAAOE,oBAAoB,WAAY6G,GACvC/G,OAAOE,oBAAoB,YAAaqG,GACxCvG,OAAOE,oBAAoB,YAAayG,GACxC3G,OAAOE,oBAAoB,UAAW6G,MAEvC,CAACH,EAAkBE,EAAiBC,EAAgBR,EAAiBI,IAEjE3C,ECoNeiD,GAChBC,EAAWC,iBAAc,MACzBC,EAASD,iBAAe,MACxB3G,EAASuB,GAAS,SAACe,GAAD,OAAWA,EAAMtC,UACnCkD,EAAa3B,GAAS,SAACe,GAAD,OAAWA,EAAMF,QAAQc,cAC/Cb,EAAUd,GAAS,SAACe,GAAD,OAAWA,EAAMF,QAAQC,WAC5CwE,EAAoC,CAAC,EAAG,GAAK,IAC7C5G,EAAc,IAAIC,UAAQ,EAAG,EAAG,GAEtC,EAAmB4G,aAAO,iBAAO,CAC/B7B,KAAM4B,EACN3B,KAAM,EACN9E,SAAUH,EAAY8G,UACtBC,SAAU,CAACjG,KAAKE,GAAI,EAAG,GACvBkE,KAAM,SACN8B,UAAWC,MANb,mBAAO9B,EAAP,KAAY+B,EAAZ,KASQC,EAAYC,oBAAU,CAC5BC,GAAI,CAAEF,QAAS,GACfG,KAAM,CAAEH,QAAS,IACjBI,OAAQ,CAAEC,SAAU,QAHdL,QAMFF,EAAU9H,uBAAY,SAACsI,GAAD,OAAcN,EAAQO,UAAS,CAACP,IAgC5D,OD5UK,SAAqBrI,EAAuB6I,GACjD,IAAMC,EAAWzI,uBACf,YAAiB,EAAdC,UACeN,GACd6I,MAGJ,CAAC7I,EAAe6I,IAGlBrI,qBAAU,WAER,OADAC,OAAOC,iBAAiB,WAAYoI,GAC7B,WACLrI,OAAOE,oBAAoB,WAAYmI,MAExC,CAACA,IC+RJC,CAAYC,IAAW1F,GAEvB2F,aAAS,SAAC1F,EAAOa,GACfD,EACEC,EACAC,EACAC,EACAC,EACAC,EACAC,GAGF,IAAMwD,GAAW,IAAIiB,SAAQC,kBAAkBlI,EAAOS,aAChDL,EAAWH,EAAYoE,QAAQ7D,gBAAgBR,EAAOS,aAE5D0G,EAAIH,SAASmB,KAAKnB,GAClBG,EAAI/G,SAAS+H,KAAK/H,MAGpBb,qBAAU,WACR,IAAMiF,EAAOY,EAAIgD,QAEjB,OADA5D,EAAK/E,iBAAiB,UAAWyH,GAC1B,kBAAM1C,EAAK9E,oBAAoB,UAAWwH,MAChD,CAAC9B,EAAK8B,IAET3H,qBAAU,WAER,OADAgF,EAAoBa,GACb,kBAAMV,EAAuBU,MACnC,CAACA,EAAKb,EAAqBG,IAG5B,uBAAOU,IAAKsB,EAAUtG,SAAU,CAAC,EAAG,EAAG,GAAvC,SACE,eAACiI,EAAA,EAAD,CACEpD,KAAM4B,EACNyB,OAAQ,IACRC,WAAY,EACZnD,IAAKA,EACLC,eAAa,EALf,UAOE,kCAAkBC,OAAO,WAAWhF,MAAM,YAC1C,cAACkI,EAAA,EAAD,CACElI,MAAM,SACNgF,OAAO,WACP8B,QAASA,EAAQ1F,MACjB+G,MAAO,KAET,cAACC,EAAA,EAAD,CACEC,aAAW,EACXvD,IAAKwB,EACLxG,SAAU,CAAC,EAAG,EAAG,GACjB4G,SAAU,EAAEjG,KAAKE,GAAK,GAAI,EAAG,UAOvC,SAAS2H,EAAUC,GACjB,IAAMjH,EAAQL,GAAS,SAACe,GAAD,OAAWA,EAAMV,SAExC,OACE,iDAAWiH,GAAX,aACGjH,EAAMkH,KAAI,SAACvG,GAAD,OACT,cAACwG,EAAD,CAA4BxG,KAAMA,GAAnBA,EAAK1C,cAM5B,SAASkJ,EAAT,GAA6C,IAAzBxG,EAAwB,EAAxBA,KACZgC,EAAsBhD,GAC1B,SAACe,GAAD,OAAWA,EAAMF,QAAQmC,uBAErBG,EAAyBnD,GAC7B,SAACe,GAAD,OAAWA,EAAMF,QAAQsC,0BAI3B,EAAcM,aAAU,iBAAO,CAC7BC,KAHiB,GAIjBC,KAAM,EACN9E,SAAUmC,EAAKnC,SAAS2G,UACxB1G,SAAUkC,EAAKlC,SAAS0G,cAJnB3B,EAAP,oBAYA,OALA7F,qBAAU,WAER,OADAgF,EAAoBa,GACb,kBAAMV,EAAuBU,MACnC,CAACA,EAAKb,EAAqBG,IAG5B,uBAAMU,IAAKA,EAAK4D,MAfC,GAekBC,YAAU,EAA7C,UACE,gCAAgBhE,KAAM,CAAC,EAAG,GAAI,MAC9B,kCAAkBK,OAAO,WAAWhF,MAAOiC,EAAKjC,WAKtD,SAAS4I,IACP,IAAMnH,EAASR,GAAS,SAACe,GAAD,OAAWA,EAAMP,UAEzC,OACE,gCACGA,EAAOoH,WAAWL,KAAI,SAACjG,GAAD,OACrB,cAACuG,EAAD,CAA+BvG,MAAOA,GAAtBA,EAAMjC,cAM9B,SAASwI,EAAT,GAAiD,IAA5BvG,EAA2B,EAA3BA,MACb0B,EAAsBhD,GAC1B,SAACe,GAAD,OAAWA,EAAMF,QAAQmC,uBAErBG,EAAyBnD,GAC7B,SAACe,GAAD,OAAWA,EAAMF,QAAQsC,0BAE3B,EAA6B2E,mBAAQ,kBA7LvC,SAAqBhI,GACnB,IAAMiI,EAAc,IAAI3H,aACxB2H,EAAYpF,iBAAiB,IAAIhE,UAAQ,EAAG,EAAG,GAAImB,EAAYuC,GAE/D,IAAM2F,EAAc,IAAI5H,aACxB4H,EAAYrF,iBAAiB,IAAIhE,UAAQ,EAAG,EAAG,GAAImB,EAAYsC,GAE/D,IAAM6F,EAAaF,EAAYhF,SAASiF,GAElCE,EAAQ,IAAIxB,QAQlB,OAPAwB,EAAMvB,kBAAkBsB,GAOjB,CAACC,EALkB,IAAIvJ,UAAQ,EAAG,EAAGmB,EAAYqI,GAGlBlJ,gBAAgBgJ,IA8KXG,CAAY9G,EAAMxB,eAAc,CACzEwB,IADF,mBAAOmE,EAAP,KAAiB5G,EAAjB,KAGMwJ,EAAsC,CAAC,GAAK,GAAK,IACvD,EAAc9C,aACZ,iBAAO,CACL7B,KAAM2E,EACN1E,KAAM,EACN9E,SAAUA,EAAS2G,UACnBC,SAAUA,EAASD,UACnB5B,KAAM,iBAERqB,EACA,CAACQ,EAAU5G,IATNgF,EAAP,oBAiBA,OALA7F,qBAAU,WAER,OADAgF,EAAoBa,GACb,kBAAMV,EAAuBU,MACnC,CAACA,EAAKb,EAAqBG,IAG5B,cAAC2D,EAAA,EAAD,CACEpD,KAAM2E,EACNtB,OAAQ,IACRC,WAAY,EACZnD,IAAKA,EACLC,eAAa,EALf,SAOE,kCAAkBC,OAAO,WAAWhF,MAAOuC,EAAMvC,UAKvD,SAASuJ,IACP,IAAM3H,EAAmBX,GAAS,SAACe,GAAD,OAAWA,EAAMJ,oBAC7C4H,EAAwBT,mBAC5B,kBACEnH,EACG6E,UACAgD,QACC,SAACC,GAAD,YACgBxD,IAAdwD,EAAE5B,aAEV,CAAClG,IAEG+H,EAAWnL,EAAWoL,KAE5B,OACE,cAAC,WAAD,CAAUC,SAAU,KAApB,SACE,eAAC,IAAD,CAAgBC,cAAe,EAAGC,WAAW,EAA7C,UACGJ,EACC,cAAC,IAAD,CACEK,QAAQ,EACRC,MAAO,IACPC,MAAO,IAAIC,UAAQ,EAAG,KAGxB,cAAC,IAAD,IAEF,cAAC,IAAD,CACEC,UAAWZ,EACXa,aAAc,GACdC,WAAY,EACZC,iBAAkB,SAClBC,gBAAiB,QACjBC,MAAM,EACNC,MAAM,EACNC,MAAO,KACPC,OAAQ,OAEV,cAACC,EAAA,EAAD,CACE7C,OAAQ,IACR8C,MAAO,GACPC,MAAO,IACPC,OAAQ,EACRC,WAAY,EACZC,MAAI,IAEN,cAAC,IAAD,CAAUC,OAAO,EAAOC,OAAQ,GAAKC,SAAU,WAoBxC,SAASC,IACtB,IAAMhH,EAAYrD,GAAS,SAACe,GAAD,OAAWA,EAAMF,QAAQwC,aAGpD,OAFArF,oBAAUqF,EAAW,CAACA,IAGpB,eAAC,IAAD,CAAQiH,MAAO,CAAEC,gBAAiB,WAAaC,SAAO,EAAtD,UACE,cAACC,EAAA,EAAD,CACEC,UAAW,EACXC,UAAU,UAEZ,cAACC,EAAA,EAAD,CAAaC,WAAS,IACtB,eAAC,IAAD,CACEC,QAAS,CAAC,EAAG,EAAG,GAChBC,uBAAwB,CACtBC,SAAU,EACVC,YAAa,GAJjB,UAOE,4BACEpM,SAAU,CAAC,GAAI,GAAI,IACnB6I,YAAU,EACVwD,uBAAsB,IACtBC,wBAAuB,MAEzB,cAAC3H,EAAD,IACA,cAAC6D,EAAD,IACA,cAACM,EAAD,IACA,cAAC3D,EAAD,OAEF,cAACsE,EAAD,OArCN8C,YAAY,CACVC,QAAS,KACTC,KAAM,KACNC,KAAM,IACNC,QAAS,GACTC,MAAO,KChiBTC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.eb04b58b.chunk.js","sourcesContent":["import { useCallback, useEffect, useState } from \"react\";\n\nexport function useKeyDown(targetKeyCode: number): boolean {\n  const [keyPressed, setKeyPressed] = useState(false);\n\n  const keyDown = useCallback(\n    ({ keyCode }) => {\n      if (keyCode === targetKeyCode) {\n        setKeyPressed(true);\n      }\n    },\n    [targetKeyCode]\n  );\n\n  const keyUp = useCallback(\n    ({ keyCode }) => {\n      if (keyCode === targetKeyCode) {\n        setKeyPressed(false);\n      }\n    },\n    [targetKeyCode]\n  );\n\n  useEffect(() => {\n    window.addEventListener(\"keydown\", keyDown);\n    window.addEventListener(\"keyup\", keyUp);\n    return () => {\n      window.removeEventListener(\"keydown\", keyDown);\n      window.removeEventListener(\"keyup\", keyUp);\n    };\n  }, [keyDown, keyUp]);\n\n  return keyPressed;\n}\n\nexport function useKeyPress(targetKeyCode: number, callback: () => void): void {\n  const keyPress = useCallback(\n    ({ keyCode }) => {\n      if (keyCode === targetKeyCode) {\n        callback();\n      }\n    },\n    [targetKeyCode, callback]\n  );\n\n  useEffect(() => {\n    window.addEventListener(\"keypress\", keyPress);\n    return () => {\n      window.removeEventListener(\"keypress\", keyPress);\n    };\n  }, [keyPress]);\n}\n\nexport type TouchPosition = { x: number, y: number} | undefined\n\nexport function useTouch(): TouchPosition {\n  const [touchDown, setTouchDown] = useState<boolean>(false);\n  const [touchPosition, setTouchPosition] = useState<TouchPosition>();\n\n  const handleMouseDown = useCallback((event: MouseEvent) => {\n    setTouchPosition({ x: event.clientX, y: event.clientY });\n    setTouchDown(true);\n  }, [setTouchPosition, setTouchDown]);\n\n  const handleMouseMove = useCallback((event: MouseEvent) => {\n    if (touchDown) setTouchPosition({ x: event.clientX, y: event.clientY });\n  }, [setTouchPosition, touchDown]);\n\n  const handleTouchStart = useCallback((event: TouchEvent) => {\n    setTouchPosition({ x: event.touches[0].clientX, y: event.touches[0].clientY });\n    setTouchDown(true);\n  }, [setTouchPosition, setTouchDown]);\n\n  const handleTouchMove = useCallback((event: TouchEvent) => {\n    if (touchDown) setTouchPosition({ x: event.touches[0].clientX, y: event.touches[0].clientY });\n  }, [setTouchPosition, touchDown]);\n\n  const handleTouchEnd = useCallback(() => {\n    setTouchPosition(undefined);\n    setTouchDown(false);\n  }, [setTouchPosition, setTouchDown]);\n\n  useEffect(() => {\n    window.addEventListener(\"touchstart\", handleTouchStart);\n    window.addEventListener(\"touchmove\", handleTouchMove);\n    window.addEventListener(\"touchend\", handleTouchEnd);\n    window.addEventListener(\"mousedown\", handleMouseDown);\n    window.addEventListener(\"mousemove\", handleMouseMove);\n    window.addEventListener(\"mouseup\", handleTouchEnd);\n    return () => {\n      window.removeEventListener(\"touchstart\", handleTouchStart);\n      window.removeEventListener(\"touchmove\", handleTouchMove);\n      window.removeEventListener(\"touchend\", handleTouchEnd);\n      window.removeEventListener(\"mousedown\", handleMouseDown);\n      window.removeEventListener(\"mousemove\", handleMouseMove);\n      window.removeEventListener(\"mouseup\", handleTouchEnd);\n    };\n  }, [handleTouchStart, handleTouchMove, handleTouchEnd, handleMouseDown, handleMouseMove]);\n\n  return touchPosition;\n}","import { useSpring } from \"@react-spring/core\";\nimport { Physics, useBox, useSphere } from \"@react-three/cannon\";\nimport {\n  AdaptiveDpr,\n  MeshDistortMaterial,\n  PerspectiveCamera,\n  RoundedBox,\n  softShadows,\n  Stars,\n  Stats,\n} from \"@react-three/drei\";\nimport { Canvas, useFrame } from \"@react-three/fiber\";\nimport {\n  EffectComposer,\n  Glitch,\n  Outline,\n  SMAA,\n  Vignette,\n} from \"@react-three/postprocessing\";\nimport { List, Map, Set } from \"immutable\";\nimport {\n  KEY_DOWN,\n  KEY_G,\n  KEY_LEFT,\n  KEY_RIGHT,\n  KEY_SPACE,\n  KEY_UP,\n} from \"keycode-js\";\nimport {\n  MutableRefObject,\n  Ref,\n  Suspense,\n  useCallback,\n  useEffect,\n  useMemo,\n  useRef,\n} from \"react\";\nimport {\n  Camera,\n  Euler,\n  Event,\n  Group,\n  Mesh,\n  Object3D,\n  Quaternion,\n  Vector2,\n  Vector3,\n} from \"three\";\nimport create, { State } from \"zustand\";\nimport \"./App.css\";\nimport { useKeyDown, useKeyPress, useTouch, TouchPosition } from \"./useInput\";\n\ntype Player = {\n  orientation: Quaternion;\n};\n\nconst createPlayer = (): Player => ({\n  orientation: new Quaternion(),\n});\n\nconst ballColors = [\n  \"rgb(249, 65, 68)\",\n  \"rgb(243, 114, 44)\",\n  \"rgb(248, 150, 30)\",\n  \"rgb(249, 199, 79)\",\n  \"rgb(144, 190, 109)\",\n  \"rgb(67, 170, 139)\",\n  \"rgb(87, 117, 144)\",\n];\n\nfunction getBallColor(ballId: number): string {\n  return ballColors[ballId % ballColors.length];\n}\n\ntype Ball = {\n  velocity: Vector3;\n  position: Vector3;\n  color: string;\n  ballId: number;\n};\n\nconst createBall = (\n  ballId: number,\n  position: Vector3,\n  velocity: Vector3\n): Ball => ({\n  ballId,\n  position,\n  velocity,\n  color: getBallColor(ballId),\n});\n\nconst createBallFromPlayer = (ballId: number, player: Player): Ball => {\n  const translation = new Vector3(0, 0, 3);\n  const direction = new Vector3(0, 0, -1);\n\n  const position = translation.applyQuaternion(player.orientation);\n  const velocity = direction\n    .applyQuaternion(player.orientation)\n    .multiplyScalar(2);\n\n  return createBall(ballId, position, velocity);\n};\n\ntype Brick = {\n  orbitOffset: Vector3;\n  color: string;\n  brickId: number;\n  mesh?: Mesh;\n};\n\nconst createBrick = (brickId: number, orbitOffset: Vector3): Brick => ({\n  brickId,\n  orbitOffset,\n  color: getBallColor(brickId),\n});\n\nconst createRandomBrick = (brickId: number): Brick => {\n  const brickWidth = 0.4;\n  const brickGap = 0.2;\n  const maxBricks = Math.floor((2 * Math.PI) / (brickWidth + brickGap));\n  const positionX = Math.floor(Math.random() * maxBricks);\n  const positionY = Math.floor(Math.random() * maxBricks);\n\n  return createBrick(\n    brickId,\n    new Vector3(\n      positionX * (brickWidth + brickGap) + brickGap / 2,\n      positionY * (brickWidth + brickGap) + brickGap / 2,\n      1.5\n    )\n  );\n};\n\ntype Object3DRef = MutableRefObject<Object3D | undefined>;\ninterface AppState extends State {\n  player: Player;\n  balls: List<Ball>;\n  nextBallId: number;\n  bricks: Map<number, Brick>;\n  nextBrickId: number;\n  outlineSelection: Set<Object3DRef>;\n  actions: {\n    addBall: () => void;\n    removeBrick: (brickId: number) => void;\n    addRandomBrick: () => void;\n    updateBrick: (brickId: number, changes: Partial<Brick>) => void;\n    movePlayer: (\n      delta: number,\n      leftPressed: boolean,\n      rightPressed: boolean,\n      upPressed: boolean,\n      downPressed: boolean,\n      touchPosition: TouchPosition\n    ) => void;\n    addOutlineSelection: (mesh: Object3DRef) => void;\n    removeOutlineSelection: (mesh: Object3DRef) => void;\n    resetGame: () => void;\n  };\n}\n\nconst useStore = create<AppState>((set, get) => ({\n  player: createPlayer(),\n  balls: List<Ball>(),\n  nextBallId: 0,\n  bricks: Map<number, Brick>(),\n  nextBrickId: 0,\n  outlineSelection: Set<Object3DRef>(),\n  actions: {\n    addBall: () =>\n      set((state) => {\n        const ball = createBallFromPlayer(state.nextBallId, state.player);\n        return {\n          balls: state.balls.push(ball).slice(-3),\n          nextBallId: state.nextBallId + 1,\n        };\n      }),\n    removeBrick: (brickId: number) =>\n      set((state) => ({ bricks: state.bricks.delete(brickId) })),\n    addRandomBrick: () =>\n      set((state) => {\n        const brick = createRandomBrick(state.nextBrickId);\n        return {\n          bricks: state.bricks.set(brick.brickId, brick),\n          nextBrickId: state.nextBrickId + 1,\n        };\n      }),\n    updateBrick: (brickId: number, changes: Partial<Brick>) =>\n      set((state) => ({\n        bricks: state.bricks.update(brickId, (value) => ({\n          ...value,\n          ...changes,\n        })),\n      })),\n    movePlayer: (\n      delta: number,\n      leftPressed: boolean,\n      rightPressed: boolean,\n      upPressed: boolean,\n      downPressed: boolean,\n      touchPosition: TouchPosition\n    ) =>\n      set((state) => {\n        const [horizontalAngle, verticalAngle] = getAngleFromInput(\n          leftPressed,\n          rightPressed,\n          upPressed,\n          downPressed,\n          touchPosition\n        );\n        const verticalAxis = new Vector3(-1, 0, 0);\n        const verticalRotation = new Quaternion().setFromAxisAngle(\n          verticalAxis,\n          verticalAngle * delta\n        );\n        const horizontalAxis = new Vector3(0, 1, 0);\n        const horizontalRotation = new Quaternion().setFromAxisAngle(\n          horizontalAxis,\n          horizontalAngle * delta\n        );\n\n        const orientation = state.player.orientation\n          .clone()\n          .multiply(verticalRotation)\n          .multiply(horizontalRotation);\n\n        return {\n          player: {\n            orientation,\n          },\n        };\n      }),\n    addOutlineSelection: (mesh: Object3DRef) =>\n      set((state) => ({ outlineSelection: state.outlineSelection.add(mesh) })),\n    removeOutlineSelection: (mesh: Object3DRef) =>\n      set((state) => ({\n        outlineSelection: state.outlineSelection.remove(mesh),\n      })),\n    resetGame: () => {\n      const {\n        actions: { addRandomBrick },\n      } = get();\n      [...Array(16)].forEach(addRandomBrick);\n    },\n  },\n}));\n\nfunction getAngleFromInput(\n  leftPressed: boolean,\n  rightPressed: boolean,\n  upPressed: boolean,\n  downPressed: boolean,\n  touchPosition: TouchPosition\n): [number, number] {\n  if (touchPosition) {\n    const verticalAngle =\n      ((window.innerHeight - touchPosition.y) / window.innerHeight - 0.5) * 2;\n    const horizontalAngle = (touchPosition.x / window.innerWidth - 0.5) * 2;\n    return [horizontalAngle, verticalAngle];\n  }\n  const verticalAngle = downPressed ? -1 : upPressed ? 1 : 0;\n  const horizontalAngle = leftPressed ? -1 : rightPressed ? 1 : 0;\n  return [horizontalAngle, verticalAngle];\n}\n\nfunction orbitAround(orbitOffset: Vector3): [Euler, Vector3] {\n  const quaternionX = new Quaternion();\n  quaternionX.setFromAxisAngle(new Vector3(1, 0, 0), orbitOffset.x);\n\n  const quaternionY = new Quaternion();\n  quaternionY.setFromAxisAngle(new Vector3(0, 1, 0), orbitOffset.y);\n\n  const quaternion = quaternionX.multiply(quaternionY);\n\n  const euler = new Euler();\n  euler.setFromQuaternion(quaternion);\n\n  const translationOffset = new Vector3(0, 0, orbitOffset.z);\n\n  // Use quaternion to rotate the relative vector.\n  const translation = translationOffset.applyQuaternion(quaternion);\n\n  return [euler, translation];\n}\n\nfunction SphereMesh() {\n  const [ref] = useSphere(() => ({\n    args: 1, // radius\n    mass: 1,\n    type: \"Static\",\n  }));\n\n  return (\n    <mesh position={[0, 0, 0]} ref={ref} receiveShadow>\n      <sphereGeometry args={[1, 32, 32]} />\n      <meshToonMaterial attach=\"material\" color=\"hotpink\" />\n    </mesh>\n  );\n}\n\nfunction PlayerGroup() {\n  const addOutlineSelection = useStore(\n    (state) => state.actions.addOutlineSelection\n  );\n  const removeOutlineSelection = useStore(\n    (state) => state.actions.removeOutlineSelection\n  );\n  const leftPressed = useKeyDown(KEY_LEFT);\n  const rightPressed = useKeyDown(KEY_RIGHT);\n  const upPressed = useKeyDown(KEY_UP);\n  const downPressed = useKeyDown(KEY_DOWN);\n  const touchPosition = useTouch();\n  const padGroup = useRef<Group>(null!);\n  const camera = useRef<Camera>(null!);\n  const player = useStore((state) => state.player);\n  const movePlayer = useStore((state) => state.actions.movePlayer);\n  const addBall = useStore((state) => state.actions.addBall);\n  const padSize: [number, number, number] = [1, 0.2, 0.1];\n  const translation = new Vector3(0, 0, 4);\n\n  const [ref, api] = useBox(() => ({\n    args: padSize,\n    mass: 1,\n    position: translation.toArray(),\n    rotation: [Math.PI, 0, 0],\n    type: \"Static\",\n    onCollide: collide,\n  }));\n\n  const { distort } = useSpring({\n    to: { distort: 0 },\n    from: { distort: 0.4 },\n    config: { duration: 1500 },\n  });\n\n  const collide = useCallback((e: Event) => distort.reset(), [distort]);\n\n  useKeyPress(KEY_SPACE, addBall);\n\n  useFrame((state, delta) => {\n    movePlayer(\n      delta,\n      leftPressed,\n      rightPressed,\n      upPressed,\n      downPressed,\n      touchPosition\n    );\n\n    const rotation = new Euler().setFromQuaternion(player.orientation);\n    const position = translation.clone().applyQuaternion(player.orientation);\n\n    api.rotation.copy(rotation);\n    api.position.copy(position);\n  });\n\n  useEffect(() => {\n    const mesh = ref.current!;\n    mesh.addEventListener(\"collide\", collide);\n    return () => mesh.removeEventListener(\"collide\", collide);\n  }, [ref, collide]);\n\n  useEffect(() => {\n    addOutlineSelection(ref);\n    return () => removeOutlineSelection(ref);\n  }, [ref, addOutlineSelection, removeOutlineSelection]);\n\n  return (\n    <group ref={padGroup} position={[0, 0, 0]}>\n      <RoundedBox\n        args={padSize} // Width, Height and Depth of the box\n        radius={0.05} // Border-Radius of the box\n        smoothness={8} // Optional, number of subdivisions\n        ref={ref as Ref<Mesh>} // All THREE.Mesh props are valid\n        receiveShadow\n      >\n        <meshToonMaterial attach=\"material\" color=\"#f3f3f3\" />\n        <MeshDistortMaterial\n          color=\"orange\"\n          attach=\"material\"\n          distort={distort.get()} // Strength, 0 disables the effect (default=1)\n          speed={10} // Speed (default=1)\n        />\n        <PerspectiveCamera\n          makeDefault\n          ref={camera}\n          position={[0, 1, 2]}\n          rotation={[-Math.PI / 16, 0, 0]}\n        />\n      </RoundedBox>\n    </group>\n  );\n}\n\nfunction BallGroup(props: JSX.IntrinsicElements[\"group\"]) {\n  const balls = useStore((state) => state.balls);\n\n  return (\n    <group {...props}>\n      {balls.map((ball) => (\n        <BallMesh key={ball.ballId} ball={ball} />\n      ))}\n    </group>\n  );\n}\n\nfunction BallMesh({ ball }: { ball: Ball }) {\n  const addOutlineSelection = useStore(\n    (state) => state.actions.addOutlineSelection\n  );\n  const removeOutlineSelection = useStore(\n    (state) => state.actions.removeOutlineSelection\n  );\n  const ballRadius = 0.2;\n\n  const [ref] = useSphere(() => ({\n    args: ballRadius,\n    mass: 1,\n    position: ball.position.toArray(),\n    velocity: ball.velocity.toArray(),\n  }));\n\n  useEffect(() => {\n    addOutlineSelection(ref);\n    return () => removeOutlineSelection(ref);\n  }, [ref, addOutlineSelection, removeOutlineSelection]);\n\n  return (\n    <mesh ref={ref} scale={ballRadius} castShadow>\n      <sphereGeometry args={[1, 16, 16]} />\n      <meshToonMaterial attach=\"material\" color={ball.color} />\n    </mesh>\n  );\n}\n\nfunction BrickGroup() {\n  const bricks = useStore((state) => state.bricks);\n\n  return (\n    <group>\n      {bricks.valueSeq().map((brick: Brick) => (\n        <BrickMesh key={brick.brickId} brick={brick} />\n      ))}\n    </group>\n  );\n}\n\nfunction BrickMesh({ brick }: { brick: Brick }) {\n  const addOutlineSelection = useStore(\n    (state) => state.actions.addOutlineSelection\n  );\n  const removeOutlineSelection = useStore(\n    (state) => state.actions.removeOutlineSelection\n  );\n  const [rotation, position] = useMemo(() => orbitAround(brick.orbitOffset), [\n    brick,\n  ]);\n  const brickSize: [number, number, number] = [0.4, 0.4, 0.1];\n  const [ref] = useBox(\n    () => ({\n      args: brickSize,\n      mass: 1,\n      position: position.toArray(),\n      rotation: rotation.toArray(),\n      type: \"Static\",\n    }),\n    undefined,\n    [rotation, position]\n  );\n\n  useEffect(() => {\n    addOutlineSelection(ref);\n    return () => removeOutlineSelection(ref);\n  }, [ref, addOutlineSelection, removeOutlineSelection]);\n\n  return (\n    <RoundedBox\n      args={brickSize} // Width, Height and Depth of the box\n      radius={0.05} // Border-Radius of the box\n      smoothness={8} // Optional, number of subdivisions\n      ref={ref as Ref<Mesh>} // All THREE.Mesh props are valid\n      receiveShadow\n    >\n      <meshToonMaterial attach=\"material\" color={brick.color} />\n    </RoundedBox>\n  );\n}\n\nfunction Effects() {\n  const outlineSelection = useStore((state) => state.outlineSelection);\n  const outlineSelectionArray = useMemo(\n    () =>\n      outlineSelection\n        .toArray()\n        .filter(\n          (v: Object3DRef): v is MutableRefObject<Object3D> =>\n            v.current !== undefined\n        ),\n    [outlineSelection]\n  );\n  const gPressed = useKeyDown(KEY_G);\n\n  return (\n    <Suspense fallback={null}>\n      <EffectComposer multisampling={0} autoClear={false}>\n        {gPressed ? (\n          <Glitch\n            active={true} // turn on/off the effect (switches between \"mode\" prop and GlitchMode.DISABLED)\n            ratio={0.85} // Threshold for strong glitches, 0 - no weak glitches, 1 - no strong glitches.\n            delay={new Vector2(0, 0)}\n          />\n        ) : (\n          <SMAA />\n        )}\n        <Outline\n          selection={outlineSelectionArray}\n          edgeStrength={10} // the edge strength\n          pulseSpeed={0.0} // a pulse speed. A value of zero disables the pulse effect\n          visibleEdgeColor={0xffffff} // the color of visible edges\n          hiddenEdgeColor={0x22090a} // the color of hidden edges\n          blur={false} // whether the outline should be blurred\n          xRay={false} // indicates whether X-Ray outlines are enabled\n          width={2048}\n          height={2048}\n        />\n        <Stars\n          radius={100} // Radius of the inner sphere (default=100)\n          depth={50} // Depth of area where stars should fit (default=50)\n          count={5000} // Amount of stars (default=5000)\n          factor={4} // Size factor (default=4)\n          saturation={0} // Saturation 0-1 (default=0)\n          fade // Faded dots (default=false)\n        />\n        <Vignette eskil={false} offset={0.1} darkness={1.1} />\n        {/* <SMAA /> */}\n      </EffectComposer>\n    </Suspense>\n  );\n}\n// colored bricks all around the sphere\n// color combination to build\n// special bricks to add new colors to other players\n// special brick to shuffle players\n// color bricks (splatoon style)\n\nsoftShadows({\n  frustum: 3.75, // Frustum width (default: 3.75) must be a float\n  size: 0.005, // World size (default: 0.005) must be a float\n  near: 9.5, // Near plane (default: 9.5) must be a float\n  samples: 17, // Samples (default: 17) must be a int\n  rings: 11, // Rings (default: 11) must be a int\n});\n\nexport default function App() {\n  const resetGame = useStore((state) => state.actions.resetGame);\n  useEffect(resetGame, [resetGame]);\n\n  return (\n    <Canvas style={{ backgroundColor: \"#121212\" }} shadows>\n      <Stats\n        showPanel={0} // Start-up panel (default=0)\n        className=\"stats\" // Optional className to add to the stats container dom element\n      />\n      <AdaptiveDpr pixelated />\n      <Physics\n        gravity={[0, 0, 0]}\n        defaultContactMaterial={{\n          friction: 0,\n          restitution: 1,\n        }}\n      >\n        <pointLight\n          position={[30, 10, 10]}\n          castShadow\n          shadow-mapSize-width={256}\n          shadow-mapSize-height={256}\n        />\n        <SphereMesh />\n        <BallGroup />\n        <BrickGroup />\n        <PlayerGroup />\n      </Physics>\n      <Effects />\n    </Canvas>\n  );\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"bootstrap/dist/css/bootstrap.css\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}